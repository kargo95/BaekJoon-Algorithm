#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
const int MAX = 30;
int N,cnt;
int adjacent[MAX][MAX];
int houseCnt[1010];
bool visited[MAX][MAX];
int dx[4] = { 0,0,-1,1 };
int dy[4] = { 1,-1,0,0 };

void DFS(int i,int j){
	visited[i][j] = true;
	houseCnt[cnt]++;	
	for(int k=0;k<4;k++){
		int nx = i + dx[k];
		int ny = j + dy[k];
		if (0 <= nx && nx < N && 0 <= ny && ny < N) {
            if (!visited[nx][ny] &&adjacent[nx][ny]) DFS(nx, ny);
        }
	}
}

int main(){
	cin.tie(NULL);
	ios::sync_with_stdio(false);
	
	cin >> N; 
	for(int i=0;i<N;i++){
		for(int j = 0; j< N ; j++){
			scanf("%1d",&adjacent[i][j]);
		}
	}
	for(int i=0;i<N;i++){
		for(int j = 0; j< N ; j++){
			if(adjacent[i][j]&&!visited[i][j]){			
				DFS(i,j);
				cnt++;
			}
		}
	}
	cout<<cnt<<"\n";
	sort(houseCnt,houseCnt+cnt);
	for(int i=0;i<cnt;i++){
		cout<< houseCnt[i]<<"\n";
	}
	return 0;

	 
}